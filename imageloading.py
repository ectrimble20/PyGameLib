from pygame import Surface
import pygame
import os


class SpriteMapLoader(object):
    """
    SpriteMapLoader is a port of my parse function that allows me to load multiple sprite maps in from
    a single point.

    It can be used as a replacement for the image manager, or in conjunction with it.

    The get(name) method allows you to pull a single image in the same way you would from the image
    manager.  While the get_dictionary() method allows you to pull the entire loaded image dictionary
    which would allow you to load the entire contents of the SpriteMap class into the Image manager
    using it's load_image_list(dict) method, which might need to be renamed since it's not loading
    a list, but rather a key-value pair of image names and surfaces.

    Remember too that the image_directory is relative to the class.  If no image directory is passed
    it assumes (probably incorrectly) that the image directory is the same directory it is in.
    """

    def __init__(self, image_directory=None):
        if image_directory is None:  # presumes image directory is THIS directory
            self._image_directory = os.getcwd()
        else:
            self._image_directory = image_directory
        self._image_dictionary = {}

    def parse_sprite_map(self, name: str, rows: int, cols: int, w: int, h: int, key_list: list, alpha: tuple):
        """
        Parse a sprite map image
        :param name: Name of the image (including extension)
        :param rows: number of rows to pull from the image
        :param cols: number of columns to pull from the image
        :param w: image width
        :param h: image height
        :param key_list: image keys to apply, these should be ordered to match the images
        :param alpha: color of alpha, if set to None, no alpha will be applied
        :return: None
        """
        if len(key_list) < 1:
            raise KeyError("Expect at least 1 image key")
        img_surface = pygame.image.load(os.path.join(self._image_dictionary), name).convert()
        key_list.reverse()  # reverse the order, we'll be loading them in reverse so we can pop the names
        for r in range(rows):
            for c in range(cols):
                key = key_list.pop()
                # the key can be None, if it is, we assume the image at this point is empty and unused
                if key is None:
                    continue
                # check for key conflicts
                if key in self._image_dictionary:
                    raise KeyError("Key conflict in image dictionary for key {}".format(key))
                img_slice = Surface([w, h])
                img_slice.blit(img_surface, (0, 0), ((c*w), (c*h), (r*w), (r*h)))
                if alpha is not None:
                    img_slice.set_colorkey(alpha)
                self._image_dictionary[key] = img_slice

    def get(self, key):
        """
        Get a specific image surface
        :param key: str
        :return: Surface
        """
        if key in self._image_dictionary:
            return self._image_dictionary[key]
        else:
            raise KeyError("Key {} not found in image dictionary".format(key))

    def get_dictionary(self):
        """
        Return the entire image dictionary
        :return: dict
        """
        return self._image_dictionary


class ImageLoader(object):
    """
    Simple image loading class, basically just a wrapper around pygame.image.load
    """
    def __init__(self, image_directory):
        if image_directory is None:  # presumes image directory is THIS directory
            self._image_directory = os.getcwd()
        else:
            self._image_directory = image_directory

    def load_image(self, name: str, alpha: tuple) -> Surface:
        """
        Load a single image and return the Surface generated by it
        :param name: image name
        :param alpha: color to set as transparency
        :return: Surface
        """
        img_surface = pygame.image.load(os.path.join(self._image_directory), name).convert()
        if alpha is not None:
            img_surface.set_colorkey(alpha)
        return img_surface
